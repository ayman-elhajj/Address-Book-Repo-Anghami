package com.example.addressbook.dao;

import com.example.addressbook.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository("postgres")
public class PersonDataAccessService implements PersonDao {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public PersonDataAccessService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public int insertPerson(UUID id, Person person) {
        String sql = "INSERT INTO person (name, phone, address)"
                + "VALUES ( ?, ?, ?);"; //the uuid_generate_v4() function lets me create the UUID from within the db
        // KeyHolder keyHolder = new GeneratedKeyHolder(); //keyHolder holds the value of seq_id which is autogenerated by the database

        SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
        jdbcTemplate.update(sql, new String[]{person.getName(), person.getPhone(), person.getAddress()});
        return 1;

    }

    @Override
    public List<Person> selectAllPeople(int start_id, int limit) {
        final String sql = "SELECT id, name, phone, address, seq_id FROM person WHERE person.seq_id >= ? ORDER BY person.name ASC LIMIT ?;";
        return jdbcTemplate.query(sql, new Object[]{start_id, limit}, (resultSet, i) -> {
            UUID id = UUID.fromString(resultSet.getString("id"));
            String name = resultSet.getString("name");
            String phone = resultSet.getString("phone");
            String address = resultSet.getString("address");
            int seq_id = resultSet.getInt("seq_id");
            return new Person(id, name, phone, address, seq_id);
        });
    }

    @Override
    public List<Person> searchPeople(String nameField) {
        final String sql = "SELECT id, name, phone, address, seq_id FROM person WHERE person.name LIKE ? ORDER BY person.name ASC;";
        return jdbcTemplate.query(sql, new Object[]{"%" + nameField + "%"}, (resultSet, i) -> {
            UUID id = UUID.fromString(resultSet.getString("id"));
            String name = resultSet.getString("name");
            String phone = resultSet.getString("phone");
            String address = resultSet.getString("address");
            int seq_id = resultSet.getInt("seq_id");
            return new Person(id, name, phone, address, seq_id);
        });
    }

    @Override
    public Optional<Person> selectPersonById(UUID id) {
        final String sql = "SELECT id, name, phone, address, seq_id FROM person WHERE id = ?;";

        Person person = jdbcTemplate.queryForObject(
                sql,
                new Object[]{id},
                (resultSet, i) -> {
                    UUID personId = UUID.fromString(resultSet.getString("id"));
                    String name = resultSet.getString("name");
                    String phone = resultSet.getString("phone");
                    String address = resultSet.getString("address");
                    int seq_id = resultSet.getInt("seq_id");
                    return new Person(personId, name, phone, address, seq_id);
                });
        return Optional.ofNullable(person); //if no match found
    }

    @Override
    public int deletePersonById(UUID id) {
        final String sql = "DELETE FROM person WHERE id=?;";
        jdbcTemplate.update(sql, new Object[]{id});
        return 1;
    }

    @Override
    public int updatePersonById(UUID id, Person person) {
        final String sql = "UPDATE person SET name=?, phone=?, address=? WHERE id=?;";
        jdbcTemplate.update(sql, new Object[]{
                person.getName(), person.getPhone(), person.getAddress(), id});
        return 1;
    }
}
